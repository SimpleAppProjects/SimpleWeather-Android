plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.devtools.ksp'
}

android {
    compileSdk rootProject.compileSdkVersion

    defaultConfig {
        minSdk rootProject.minSdkVersion
        targetSdk rootProject.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlin {
        jvmToolchain(17)
    }

    sourceSets {
        androidTest {
            // Adds exported schema location as test app assets.
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    flavorDimensions 'gms'
    productFlavors {
        nongms {
            dimension 'gms'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        fullgms {
            dimension 'gms'
        }
    }
    namespace 'com.thewizrd.weather_api'
}

dependencies {
    implementation project(":shared_resources")
    fullgmsImplementation project(":extras")

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugar_version"

    // Unit Testing
    androidTestImplementation "androidx.test:core:$test_core_version"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:$test_runner_version"
    androidTestImplementation "androidx.test:rules:$test_rules_version"

    // Assertions
    androidTestImplementation "androidx.test.ext:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:truth:$androidx_truth_version"
    androidTestImplementation "com.google.truth:truth:$google_truth_version"

    // Kotlin
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_version"

    implementation "androidx.preference:preference-ktx:$preference_version"

    implementation "androidx.room:room-runtime:$room_version"
    ksp "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    // Room migration testing
    androidTestImplementation "androidx.room:room-testing:$room_version"

    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.ibm.icu:icu4j:$icu4j_version"

    // JWT
    api 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly('io.jsonwebtoken:jjwt-orgjson:0.11.5') {
        exclude group: 'org.json', module: 'json' //provided by Android natively
    }

    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    ksp "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"
    implementation "com.squareup.moshi:moshi-adapters:$moshi_version"
    kapt "com.github.nename0:moshi-java-codegen:1.1.1"

    fullgmsImplementation 'com.google.android.libraries.places:places:3.2.0'
    fullgmsImplementation 'com.android.volley:volley:1.2.1' // Required by Places API ^^^
    fullgmsImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$kotlinx_version"
}

class RoomSchemaArgProvider implements CommandLineArgumentProvider {

    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)
    File schemaDir

    @Input
    Boolean incremental;

    @Input
    Boolean expandProjection;

    RoomSchemaArgProvider(File schemaDir, Boolean incremental, Boolean expandProjection) {
        this.schemaDir = schemaDir
        this.incremental = incremental
        this.expandProjection = expandProjection
    }

    @Override
    Iterable<String> asArguments() {
        // Note: If you're using KSP, you should change the line below to return
        // ["room.schemaLocation=${schemaDir.path}"]
        return [
                "room.schemaLocation=${schemaDir.path}".toString(),
                "room.incremental=" + (incremental ?: true),
                "room.expandProjection=" + (expandProjection ?: true)
        ]
    }
}

ksp {
    arg(new RoomSchemaArgProvider(new File(projectDir, "schemas"), true, true))
}